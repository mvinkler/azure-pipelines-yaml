# Mutilated beyond recognition from the example at:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  - master

pool:
  vmImage: macos-10.13

variables:
  System.Debug: True
  gorootDir: /usr/local
  GOROOT: $(gorootDir)/go
  GOPATH: $(system.defaultWorkingDirectory)/go
  GOBIN:  $(GOPATH)/bin
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)'
  # TODO: modules should be the default in Go 1.13, so this won't be needed
  #GO111MODULE: on

resources:
  repositories:
  - repository: knative-client
    type: github
    name: openshift/knative-client
    ref: refs/tags/v0.9.0
    endpoint: mvinkler

steps:
  - checkout: knative-client # will checkout at $(Pipeline.Workspace)/knative-client
    displayName: Checkout knative-client repo

  - bash: |
      printf "Using go at: $(which go)\n"
      printf "Go version: $(go version)\n"
      printf "\n\nGo environment:\n\n"
      go env
      printf "\n\nSystem environment:\n\n"
      env
    displayName: Print Go version and environment

  - bash: |
      latestGo=$(curl "https://golang.org/VERSION?m=text")
      echo "##vso[task.setvariable variable=LATEST_GO]$latestGo"
      echo "Latest Go version: $latestGo"
    displayName: "Get latest Go version"


  # Install Go
  - bash: |
      sudo rm -f $(which go)
      echo '##vso[task.prependpath]$(GOBIN)' 
      echo '##vso[task.prependpath]$(GOROOT)/bin'
      mkdir -p '$(modulePath)'
      mkdir -p '$(GOPATH)'
      wget "https://dl.google.com/go/$(LATEST_GO).darwin-amd64.tar.gz"
      sudo tar -C $(gorootDir) -xzf "$(LATEST_GO).darwin-amd64.tar.gz"
    condition: eq( variables['Agent.OS'], 'Darwin' )
    displayName: Remove old Go, set GOBIN/GOROOT, Install Go on macOS

  # TODO: When this issue is fixed, replace with installer script:
  # https://github.com/golangci/golangci-lint/issues/472
  - script: go get -v github.com/golangci/golangci-lint/cmd/golangci-lint
    displayName: Install golangci-lint

  - bash: |
      printf "Using go at: $(which go)\n"
      printf "Go version: $(go version)\n"
      printf "\n\nGo environment:\n\n"
      go env
      printf "\n\nSystem environment:\n\n"
      env
    displayName: Print Go version and environment




  - bash: |
      mkdir -p '$(GOGIT)'
      printf "Using go at: $(which go)\n"
      printf "Go version: $(go version)\n"
      printf "\n\nGo environment:\n\n"
      go env
      printf "\n\nSystem environment:\n\n"
      env
    displayName: Git

  - script: |
      go version
      if [ -f Gopkg.toml ]; then
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          dep ensure
      fi
      go build -v .
    workingDirectory: '$(modulePath)'
    displayName: 'Get dependencies, then build'